/*
 * Copyright (c) 2020 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include "cosmo.dtsi"
#include <zephyr/dt-bindings/input/input-event-codes.h>


&default_transform {
    col-offset = <6>;
};

&kscan0 {
    col-gpios
        = <&pro_micro 14 GPIO_ACTIVE_HIGH>
        , <&pro_micro 15 GPIO_ACTIVE_HIGH>
        , <&pro_micro 18 GPIO_ACTIVE_HIGH>
        , <&pro_micro 19 GPIO_ACTIVE_HIGH>
        , <&pro_micro 20 GPIO_ACTIVE_HIGH>
        , <&pro_micro 21 GPIO_ACTIVE_HIGH>
        ;
};

// Define SPI pin configurations for nice!nano v2 (USER SPECIFIED PINS)
// SDIO = D6 = P1.00 (MOSI/MISO)
// SCLK = D5 = P0.24
// nCS  = D4 = P0.22
// Mot  = D3 = P0.20 (IRQ)
&pinctrl {
    // Define pins for active SPI state (using spi0 as per driver example)
    spi0_default: spi0_default {
        group1 {
            // NRF_PSEL(peripheral, port, pin)
            psels = <NRF_PSEL(SPIM_SCK, 0, 24)>,  // P0.24 for SCK
                    <NRF_PSEL(SPIM_MOSI, 1, 0)>,  // P1.00 for MOSI/SDIO
                    <NRF_PSEL(SPIM_MISO, 0, 23)>;  // Dummy MISO pin (unused wire)
            // Make sure to properly drive MOSI/MISO - required for shared SDIO
            nordic,drive-mode = <NRF_DRIVE_H0H1>;
        };
    };
    // Define pins for sleep state
    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 24)>,
                    <NRF_PSEL(SPIM_MOSI, 1, 0)>,
                    <NRF_PSEL(SPIM_MISO, 0, 23)>;
            low-power-enable;
        };
    };
};

// Configure the SPI peripheral (using spi0)
&spi0 {
    compatible = "nordic,nrf-spim"; // nice!nano uses nRF52
    status = "okay";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    // Chip Select: D4 / P0.22
    cs-gpios = <&gpio0 22 GPIO_ACTIVE_LOW>; // Using GPIO Port 0, Pin 22

    // Define the PMW3610 sensor node on this SPI bus
    trackball: trackball@0 {
        compatible = "pixart,pmw3610"; // Use driver compatible
        reg = <0>; // SPI device address on the bus
        spi-max-frequency = <2000000>; // 2 MHz

        // Interrupt/Motion Pin: D3 / P0.20
        irq-gpios = <&gpio0 20 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // GPIO Port 0, Pin 20

        // Sensor configuration
        cpi = <800>; // Set Counts Per Inch (adjust as needed)

        status = "okay";
        wakeup-source;

        // Standard HID event codes
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
    };
};

// Bridge the sensor device to the ZMK input system
/ {
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>; // Point to the PMW3610 device node
    };
};
